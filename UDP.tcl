#*****************************************************************************************
# Vivado (TM) v2019.1 (64-bit)
#
# UDP.tcl: Tcl script for re-creating project 'UDP'
#
# Generated by Vivado on Tue Jun 17 14:46:02 +0200 2025
# IP Build 2548770 on Fri May 24 18:01:18 MDT 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (UDP.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/IP.vhd"
#    "C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/timer.vhd"
#    "C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/ethernet_generator.vhd"
#    "C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/bd/Box/hdl/Box_wrapper.vhd"
#    "C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/ethernet_frame.vhd"
#    "C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/myNot.vhd"
#    "C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/constrs_1/imports/new/Constraints.xdc"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir [file dirname [file normalize [info script]]]

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "UDP"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "UDP.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Create project
create_project -force ${_xil_proj_name_} "$origin_dir/${_xil_proj_name_}" -part xc7z015clg485-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "em.avnet.com:picozed_7015_fmc1:part0:1.1" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.board_id" -value "picozed_7015_fmc1" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/UDP.srcs/sources_1/imports/sources_1/new/IP.vhd"]\
 [file normalize "${origin_dir}/UDP.srcs/sources_1/imports/sources_1/new/timer.vhd"]\
 [file normalize "${origin_dir}/UDP.srcs/sources_1/imports/sources_1/new/ethernet_generator.vhd"]\
 [file normalize "${origin_dir}/UDP.srcs/sources_1/imports/sources_1/bd/Box/hdl/Box_wrapper.vhd"]\
 [file normalize "${origin_dir}/UDP.srcs/sources_1/imports/sources_1/new/ethernet_frame.vhd"]\
 [file normalize "${origin_dir}/UDP.srcs/sources_1/imports/sources_1/new/myNot.vhd"]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "new/IP.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "new/timer.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "new/ethernet_generator.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "hdl/Box_wrapper.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "new/ethernet_frame.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "new/myNot.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "Box_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize ${origin_dir}/UDP.srcs/constrs_1/imports/new/Constraints.xdc]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "new/Constraints.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "Box_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files IP.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/IP.vhd
}
if { [get_files timer.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/timer.vhd
}
if { [get_files ethernet_generator.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/lima/Desktop/Backup/UDP-Sandbox/UDP/UDP.srcs/sources_1/imports/sources_1/new/ethernet_generator.vhd
}


# Proc to create BD Box
proc cr_bd_Box { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# IP, ethernet_generator



  # CHANGE DESIGN NAME HERE
  set design_name Box

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axis_data_fifo:2.0\
  xilinx.com:ip:clk_wiz:6.0\
  xilinx.com:ip:ila:6.2\
  xilinx.com:ip:tri_mode_ethernet_mac:9.0\
  xilinx.com:ip:vio:3.0\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  IP\
  ethernet_generator\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set CLK_125MHz_0 [ create_bd_port -dir O -type clk CLK_125MHz_0 ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {125000000} \
 ] $CLK_125MHz_0
  set clk_in1_n_0 [ create_bd_port -dir I -type clk clk_in1_n_0 ]
  set clk_in1_p_0 [ create_bd_port -dir I -type clk clk_in1_p_0 ]
  set rgmii_rx_ctl_0 [ create_bd_port -dir I rgmii_rx_ctl_0 ]
  set rgmii_rxc_0 [ create_bd_port -dir I -type clk rgmii_rxc_0 ]
  set rgmii_rxd_0 [ create_bd_port -dir I -from 3 -to 0 rgmii_rxd_0 ]
  set rgmii_tx_ctl_0 [ create_bd_port -dir O rgmii_tx_ctl_0 ]
  set rgmii_txc_0 [ create_bd_port -dir O -type clk rgmii_txc_0 ]
  set rgmii_txd_0 [ create_bd_port -dir O -from 3 -to 0 rgmii_txd_0 ]

  # Create instance: IP_0, and set properties
  set block_name IP
  set block_cell_name IP_0
  if { [catch {set IP_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $IP_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axis_data_fifo_0, and set properties
  set axis_data_fifo_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_data_fifo:2.0 axis_data_fifo_0 ]
  set_property -dict [ list \
   CONFIG.HAS_TLAST {1} \
   CONFIG.HAS_WR_DATA_COUNT {1} \
 ] $axis_data_fifo_0

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {64.0} \
   CONFIG.CLKOUT1_JITTER {186.558} \
   CONFIG.CLKOUT1_PHASE_ERROR {204.239} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {125} \
   CONFIG.CLKOUT2_JITTER {194.337} \
   CONFIG.CLKOUT2_PHASE_ERROR {204.239} \
   CONFIG.CLKOUT2_USED {true} \
   CONFIG.CLK_OUT1_PORT {CLK_125MHz} \
   CONFIG.CLK_OUT2_PORT {CLK_100MHz} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {32.000} \
   CONFIG.MMCM_CLKIN1_PERIOD {6.400} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {8.000} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {10} \
   CONFIG.MMCM_DIVCLK_DIVIDE {5} \
   CONFIG.NUM_OUT_CLKS {2} \
   CONFIG.PRIM_IN_FREQ {156.25} \
   CONFIG.PRIM_SOURCE {Differential_clock_capable_pin} \
 ] $clk_wiz_0

  # Create instance: ethernet_generator_0, and set properties
  set block_name ethernet_generator
  set block_cell_name ethernet_generator_0
  if { [catch {set ethernet_generator_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ethernet_generator_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: ila_0, and set properties
  set ila_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:ila:6.2 ila_0 ]
  set_property -dict [ list \
   CONFIG.C_ENABLE_ILA_AXI_MON {false} \
   CONFIG.C_MONITOR_TYPE {Native} \
   CONFIG.C_NUM_OF_PROBES {16} \
   CONFIG.C_PROBE0_WIDTH {8} \
   CONFIG.C_PROBE10_WIDTH {32} \
   CONFIG.C_PROBE11_WIDTH {1} \
   CONFIG.C_PROBE14_WIDTH {32} \
   CONFIG.C_PROBE4_WIDTH {6} \
   CONFIG.C_PROBE6_WIDTH {8} \
 ] $ila_0

  # Create instance: tri_mode_ethernet_mac_0, and set properties
  set tri_mode_ethernet_mac_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:tri_mode_ethernet_mac:9.0 tri_mode_ethernet_mac_0 ]
  set_property -dict [ list \
   CONFIG.Management_Frequency {125.00} \
   CONFIG.Physical_Interface {RGMII} \
   CONFIG.SupportLevel {1} \
 ] $tri_mode_ethernet_mac_0

  # Create instance: vio_0, and set properties
  set vio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:vio:3.0 vio_0 ]
  set_property -dict [ list \
   CONFIG.C_EN_PROBE_IN_ACTIVITY {0} \
   CONFIG.C_NUM_PROBE_IN {0} \
   CONFIG.C_NUM_PROBE_OUT {7} \
   CONFIG.C_PROBE_OUT2_INIT_VAL {0xC0080109} \
   CONFIG.C_PROBE_OUT2_WIDTH {32} \
   CONFIG.C_PROBE_OUT3_INIT_VAL {0xC0080101} \
   CONFIG.C_PROBE_OUT3_WIDTH {32} \
   CONFIG.C_PROBE_OUT4_INIT_VAL {0xFFFFFFFFFFFF} \
   CONFIG.C_PROBE_OUT4_WIDTH {48} \
   CONFIG.C_PROBE_OUT5_INIT_VAL {0x000A35000001} \
   CONFIG.C_PROBE_OUT5_WIDTH {48} \
   CONFIG.C_PROBE_OUT6_INIT_VAL {0x0800} \
   CONFIG.C_PROBE_OUT6_WIDTH {16} \
 ] $vio_0

  # Create port connections
  connect_bd_net -net IP_0_busIP [get_bd_pins IP_0/busIP] [get_bd_pins ethernet_generator_0/data_in]
  connect_bd_net -net IP_0_start [get_bd_pins IP_0/start] [get_bd_pins ethernet_generator_0/prtcl_on_off]
  connect_bd_net -net axis_data_fifo_0_axis_wr_data_count [get_bd_pins axis_data_fifo_0/axis_wr_data_count] [get_bd_pins ila_0/probe10]
  connect_bd_net -net axis_data_fifo_0_m_axis_tdata [get_bd_pins axis_data_fifo_0/m_axis_tdata] [get_bd_pins ila_0/probe6] [get_bd_pins tri_mode_ethernet_mac_0/tx_axis_mac_tdata]
  connect_bd_net -net axis_data_fifo_0_m_axis_tlast [get_bd_pins axis_data_fifo_0/m_axis_tlast] [get_bd_pins ila_0/probe7] [get_bd_pins tri_mode_ethernet_mac_0/tx_axis_mac_tlast]
  connect_bd_net -net axis_data_fifo_0_m_axis_tvalid [get_bd_pins axis_data_fifo_0/m_axis_tvalid] [get_bd_pins ila_0/probe9] [get_bd_pins tri_mode_ethernet_mac_0/tx_axis_mac_tvalid]
  connect_bd_net -net axis_data_fifo_0_s_axis_tready [get_bd_pins axis_data_fifo_0/s_axis_tready] [get_bd_pins ethernet_generator_0/tready] [get_bd_pins ila_0/probe3]
  connect_bd_net -net clk_in1_n_0_1 [get_bd_ports clk_in1_n_0] [get_bd_pins clk_wiz_0/clk_in1_n]
  connect_bd_net -net clk_in1_p_0_1 [get_bd_ports clk_in1_p_0] [get_bd_pins clk_wiz_0/clk_in1_p]
  connect_bd_net -net clk_wiz_0_CLK_125MHz [get_bd_ports CLK_125MHz_0] [get_bd_pins IP_0/clk] [get_bd_pins axis_data_fifo_0/s_axis_aclk] [get_bd_pins clk_wiz_0/CLK_125MHz] [get_bd_pins ethernet_generator_0/clk] [get_bd_pins ila_0/clk] [get_bd_pins tri_mode_ethernet_mac_0/gtx_clk] [get_bd_pins tri_mode_ethernet_mac_0/refclk] [get_bd_pins tri_mode_ethernet_mac_0/s_axi_aclk] [get_bd_pins vio_0/clk]
  connect_bd_net -net ethernet_generator_0_count [get_bd_pins ethernet_generator_0/count_dbg] [get_bd_pins ila_0/probe4]
  connect_bd_net -net ethernet_generator_0_enIP [get_bd_pins IP_0/enable] [get_bd_pins ethernet_generator_0/prtcl_en]
  connect_bd_net -net ethernet_generator_0_tdata [get_bd_pins axis_data_fifo_0/s_axis_tdata] [get_bd_pins ethernet_generator_0/tdata] [get_bd_pins ila_0/probe0]
  connect_bd_net -net ethernet_generator_0_tlast [get_bd_pins axis_data_fifo_0/s_axis_tlast] [get_bd_pins ethernet_generator_0/tlast] [get_bd_pins ila_0/probe1]
  connect_bd_net -net ethernet_generator_0_tvalid [get_bd_pins axis_data_fifo_0/s_axis_tvalid] [get_bd_pins ethernet_generator_0/tvalid] [get_bd_pins ila_0/probe2]
  connect_bd_net -net rgmii_rx_ctl_0_1 [get_bd_ports rgmii_rx_ctl_0] [get_bd_pins tri_mode_ethernet_mac_0/rgmii_rx_ctl]
  connect_bd_net -net rgmii_rxc_0_1 [get_bd_ports rgmii_rxc_0] [get_bd_pins tri_mode_ethernet_mac_0/rgmii_rxc]
  connect_bd_net -net rgmii_rxd_0_1 [get_bd_ports rgmii_rxd_0] [get_bd_pins tri_mode_ethernet_mac_0/rgmii_rxd]
  connect_bd_net -net tri_mode_ethernet_mac_0_rgmii_tx_ctl [get_bd_ports rgmii_tx_ctl_0] [get_bd_pins tri_mode_ethernet_mac_0/rgmii_tx_ctl]
  connect_bd_net -net tri_mode_ethernet_mac_0_rgmii_txc [get_bd_ports rgmii_txc_0] [get_bd_pins tri_mode_ethernet_mac_0/rgmii_txc]
  connect_bd_net -net tri_mode_ethernet_mac_0_rgmii_txd [get_bd_ports rgmii_txd_0] [get_bd_pins tri_mode_ethernet_mac_0/rgmii_txd]
  connect_bd_net -net tri_mode_ethernet_mac_0_tx_axis_mac_tready [get_bd_pins axis_data_fifo_0/m_axis_tready] [get_bd_pins ila_0/probe15] [get_bd_pins tri_mode_ethernet_mac_0/tx_axis_mac_tready]
  connect_bd_net -net tri_mode_ethernet_mac_0_tx_enable [get_bd_pins ila_0/probe8] [get_bd_pins ila_0/probe13] [get_bd_pins tri_mode_ethernet_mac_0/tx_enable]
  connect_bd_net -net tri_mode_ethernet_mac_0_tx_mac_aclk [get_bd_pins ila_0/probe11] [get_bd_pins tri_mode_ethernet_mac_0/tx_mac_aclk]
  connect_bd_net -net tri_mode_ethernet_mac_0_tx_reset [get_bd_pins ila_0/probe12] [get_bd_pins tri_mode_ethernet_mac_0/tx_reset]
  connect_bd_net -net tri_mode_ethernet_mac_0_tx_statistics_vector [get_bd_pins ila_0/probe14] [get_bd_pins tri_mode_ethernet_mac_0/tx_statistics_vector]
  connect_bd_net -net vio_0_probe_out0 [get_bd_pins IP_0/rst] [get_bd_pins axis_data_fifo_0/s_axis_aresetn] [get_bd_pins ethernet_generator_0/rst] [get_bd_pins ila_0/probe5] [get_bd_pins tri_mode_ethernet_mac_0/glbl_rstn] [get_bd_pins tri_mode_ethernet_mac_0/rx_axi_rstn] [get_bd_pins tri_mode_ethernet_mac_0/s_axi_resetn] [get_bd_pins tri_mode_ethernet_mac_0/tx_axi_rstn] [get_bd_pins vio_0/probe_out0]
  connect_bd_net -net vio_0_probe_out1 [get_bd_pins tri_mode_ethernet_mac_0/tx_axis_mac_tuser] [get_bd_pins vio_0/probe_out1]
  connect_bd_net -net vio_0_probe_out2 [get_bd_pins IP_0/srcIP] [get_bd_pins vio_0/probe_out2]
  connect_bd_net -net vio_0_probe_out3 [get_bd_pins IP_0/dstIP] [get_bd_pins vio_0/probe_out3]
  connect_bd_net -net vio_0_probe_out4 [get_bd_pins ethernet_generator_0/dst_mac] [get_bd_pins vio_0/probe_out4]
  connect_bd_net -net vio_0_probe_out5 [get_bd_pins ethernet_generator_0/src_mac] [get_bd_pins vio_0/probe_out5]
  connect_bd_net -net vio_0_probe_out6 [get_bd_pins ethernet_generator_0/prtcl_type] [get_bd_pins vio_0/probe_out6]

  # Create address segments

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0.19  2019-03-26 bk=1.5019 VDI=41 GEI=35 GUI=JA:9.0 non-TLS
#  -string -flagsOSRD
preplace port CLK_125MHz_0 -pg 1 -lvl 7 -x 2090 -y 1020 -defaultsOSRD
preplace port clk_in1_n_0 -pg 1 -lvl 0 -x 0 -y 1040 -defaultsOSRD
preplace port clk_in1_p_0 -pg 1 -lvl 0 -x 0 -y 1060 -defaultsOSRD
preplace port rgmii_rx_ctl_0 -pg 1 -lvl 0 -x 0 -y 40 -defaultsOSRD
preplace port rgmii_rxc_0 -pg 1 -lvl 0 -x 0 -y 60 -defaultsOSRD
preplace port rgmii_tx_ctl_0 -pg 1 -lvl 7 -x 2090 -y 220 -defaultsOSRD
preplace port rgmii_txc_0 -pg 1 -lvl 7 -x 2090 -y 240 -defaultsOSRD
preplace portBus rgmii_rxd_0 -pg 1 -lvl 0 -x 0 -y 20 -defaultsOSRD
preplace portBus rgmii_txd_0 -pg 1 -lvl 7 -x 2090 -y 200 -defaultsOSRD
preplace inst IP_0 -pg 1 -lvl 2 -x 390 -y 490 -defaultsOSRD
preplace inst axis_data_fifo_0 -pg 1 -lvl 4 -x 1100 -y 590 -defaultsOSRD
preplace inst clk_wiz_0 -pg 1 -lvl 5 -x 1570 -y 1050 -defaultsOSRD
preplace inst ila_0 -pg 1 -lvl 6 -x 1980 -y 800 -defaultsOSRD
preplace inst tri_mode_ethernet_mac_0 -pg 1 -lvl 5 -x 1570 -y 360 -defaultsOSRD
preplace inst vio_0 -pg 1 -lvl 1 -x 120 -y 560 -defaultsOSRD
preplace inst ethernet_generator_0 -pg 1 -lvl 3 -x 710 -y 580 -defaultsOSRD
preplace netloc IP_0_busIP 1 2 1 530 480n
preplace netloc IP_0_start 1 2 1 540 500n
preplace netloc axis_data_fifo_0_axis_wr_data_count 1 4 2 1280J 660 1810
preplace netloc axis_data_fifo_0_m_axis_tdata 1 4 2 1280 50 1890
preplace netloc axis_data_fifo_0_m_axis_tlast 1 4 2 1310 680 1780
preplace netloc axis_data_fifo_0_m_axis_tvalid 1 4 2 1330 690 1800
preplace netloc axis_data_fifo_0_s_axis_tready 1 3 3 890 720 NJ 720 N
preplace netloc clk_in1_n_0_1 1 0 5 NJ 1040 NJ 1040 NJ 1040 NJ 1040 NJ
preplace netloc clk_in1_p_0_1 1 0 5 NJ 1060 NJ 1060 NJ 1060 NJ 1060 NJ
preplace netloc clk_wiz_0_CLK_125MHz 1 0 7 20 440 240 390 560 440 920 440 1300 10 1860 1020 NJ
preplace netloc ethernet_generator_0_count 1 3 3 860 740 N 740 N
preplace netloc ethernet_generator_0_enIP 1 1 3 250 370 NJ 370 860
preplace netloc ethernet_generator_0_tdata 1 3 3 900 730 NJ 730 1820
preplace netloc ethernet_generator_0_tlast 1 3 3 910 710 NJ 710 1830J
preplace netloc ethernet_generator_0_tvalid 1 3 3 870 750 NJ 750 1880J
preplace netloc rgmii_rx_ctl_0_1 1 0 6 NJ 40 NJ 40 NJ 40 NJ 40 NJ 40 1790
preplace netloc rgmii_rxc_0_1 1 0 6 NJ 60 NJ 60 NJ 60 NJ 60 NJ 60 1770
preplace netloc rgmii_rxd_0_1 1 0 6 NJ 20 NJ 20 NJ 20 NJ 20 NJ 20 1800
preplace netloc tri_mode_ethernet_mac_0_rgmii_tx_ctl 1 5 2 NJ 220 NJ
preplace netloc tri_mode_ethernet_mac_0_rgmii_txc 1 5 2 NJ 240 NJ
preplace netloc tri_mode_ethernet_mac_0_rgmii_txd 1 5 2 NJ 200 NJ
preplace netloc tri_mode_ethernet_mac_0_tx_axis_mac_tready 1 4 2 1290 700 1770J
preplace netloc tri_mode_ethernet_mac_0_tx_enable 1 5 1 1790 540n
preplace netloc tri_mode_ethernet_mac_0_tx_mac_aclk 1 5 1 1870 500n
preplace netloc tri_mode_ethernet_mac_0_tx_reset 1 5 1 1840 520n
preplace netloc tri_mode_ethernet_mac_0_tx_statistics_vector 1 5 1 1850 340n
preplace netloc vio_0_probe_out0 1 1 5 230 380 550 720 880 760 1320 760 NJ
preplace netloc vio_0_probe_out1 1 1 4 220J 290 NJ 290 NJ 290 N
preplace netloc vio_0_probe_out2 1 1 1 230 510n
preplace netloc vio_0_probe_out3 1 1 1 250 530n
preplace netloc vio_0_probe_out4 1 1 2 240 590 520J
preplace netloc vio_0_probe_out5 1 1 2 N 600 510J
preplace netloc vio_0_probe_out6 1 1 2 N 620 NJ
levelinfo -pg 1 0 120 390 710 1100 1570 1980 2090
pagesize -pg 1 -db -bbox -sgen -160 0 2250 1140
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_Box()
cr_bd_Box ""
set_property REGISTERED_WITH_MANAGER "1" [get_files Box.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files Box.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z015clg485-1 -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z015clg485-1 -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
